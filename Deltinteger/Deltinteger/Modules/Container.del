/*
Usage:

    To create contained rule:
        import "Container.del";

        rule: "Scoped Index"
        Event.OnDamageTaken          // On Damage Taken event
        if (scoper == EventPlayer()) // Check if is scoper
        if (GetID() == 79)           // GetID equals expected ID
        {
            // GetPlayer() for executor
            // GetData() for sent data
            CreateEffect(AllPlayers(), Effect.Sphere, Color.Red, Destination(EyePosition(GetPlayer()), FacingDirectionOf(GetPlayer()), GetData()), 0.1);
        }

    To trigger rule:
        ActivateScoper(79, someData);

*/

globalvar define scoper;

rule: "Create Scoper"
{
    if (CurrentGameMode() == GameMode.Deathmatch)
        CreateDummyBot(Hero.Roadhog, Team.All, 1, Vector(0, 1000, 0));
    else
        CreateDummyBot(Hero.Roadhog, Team.Team1, 1, Vector(0, 1000, 0));
    scoper = LastCreatedEntity();
    SetGravity(scoper, 0);
    SetStatus(scoper, null, Status.Unkillable, 9999);
    SetMaxHealth(scoper, 1000);
    StartDamageModification(scoper, FilteredArray(AllPlayers(), ArrayElement() != scoper), 0, DamageModificationRev.ReceiversDamagersAndDamagePercent);
    SetInvisible(scoper, InvisibleTo.All);
}

rule: "Scoper: Heal Set"
Event.OngoingPlayer
if (scoper == EventPlayer())
if (HasSpawned())
{
    Heal(scoper, null, 6000);
}

public void ActivateScoper(ref define id, define data)
{
    // Encode the data and id into one number.
    // 1234.56
    // ^^^^ ^^
    // data ID
    data += id / 100;
    Damage(scoper, scoper, data);
    Heal(scoper, null, 6000);
}

// 123.0179
// ^^^ Gets the whole number (123)
public define GetData(): RoundToInteger(EventDamage(), Rounding.Down);

// 123.0179
//       ^^ Gets the last 2 digits (79)
// Use Nearest because of optimizations at this decimal level
define GetID(): RoundToInteger((EventDamage() * 100) % 100, Rounding.Down);