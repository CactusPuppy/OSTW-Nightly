import "!Debug Tools.del";
import "!Container.del";

rule: "Commands" -1
{
    DisableInspectorRecording();
    CreateHudText(VisibleTo:AllPlayers(), Text:"https://github.com/ItsDeltin/Overwatch-Script-To-Workshop/wiki/Pathfinding", TextColor:Color.Blue, Location:Location.Right, SortOrder:0);
    HelpText("Ultimate: Create node."                                                    , 1, Color.SkyBlue);
    HelpText("Crouch + Ultimate: Destroy node."                                          , 2, Color.SkyBlue);
    HelpText("Interact: Select node."                                                    , 3, Color.LimeGreen);
    HelpText("Crouch + Interact: Deselect all nodes."                                    , 4, Color.LimeGreen);
    HelpText("Secondary Fire: Connect all selected nodes."                               , 5, Color.Green);
    HelpText("Crouch + Secondary Fire: Disconnect all selected nodes."                   , 6, Color.Green);
    HelpText("Voice Line Right: Create a path from the first to the last selected nodes.", 7, Color.Green);
    HelpText("Voice Line Left: Connect all selected nodes to the first selected node."   , 8, Color.Green);
    HelpText("Shift: Switch attribute."                                                  , 9, Color.Orange);
    HelpText("Voice Line Up: Compile pathmap."                                           , 11, Color.Yellow);
}

globalvar define scoper;

rule: "Create Scoper"
{
    if (CurrentGameMode() == GameMode.Deathmatch)
        CreateDummyBot(Hero.Roadhog, Team.All, 1, Vector(0, 1000, 0));
    else
        CreateDummyBot(Hero.Roadhog, Team.Team1, 1, Vector(0, 1000, 0));
    scoper = LastCreatedEntity();
    SetGravity(scoper, 0);
    SetStatus(scoper, null, Status.Unkillable, 9999);
    SetMaxHealth(scoper, 1000);
    StartDamageModification(scoper, FilteredArray(AllPlayers(), ArrayElement() != scoper), 0, DamageModificationRev.ReceiversDamagersAndDamagePercent);
    SetInvisible(scoper, InvisibleTo.All);
}

void HelpText(ref define text, ref define order, Color color)
{
    CreateHudText(VisibleTo:AllPlayers(), Subheader:text, SubheaderColor:color, Location:Location.Right, SortOrder:order);
}

rule: "Disable conflicting controls"
Event.OngoingPlayer
{
    SetAbility1Enabled(EventPlayer(), false);
    SetAbility2Enabled(EventPlayer(), false);
    SetSecondaryFireEnabled(EventPlayer(), false);
}

define GetClosestNode(): FirstOf(SortedArray(Nodes, DistanceBetween(EyePosition(EventPlayer()), (<Node>ArrayElement()).ShownLocation)));
define IsNodeSelectable(Node node): DistanceBetween(node.Pos, EyePosition(EventPlayer())) < 5;

rule: "Create node"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Nodes = Append(Nodes, new Node(PositionOf(EventPlayer())));
    (<Node>LastOf(Nodes)).Show();
}

rule: "Delete node"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Node selected = GetClosestNode();
    if (!IsNodeSelectable(selected)) return;

    for (define i = CountOf(Segments) - 1; i >= 0; i--)
        if (ArrayContains((<Segment>Segments[i]).Nodes, selected))
        {
            (<Segment>Segments[i]).Hide();
            delete(<Segment>Segments[i]);
            Segments = RemoveFromArrayAtIndex(Segments, i);
        }
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Blue, selected.ShownLocation, 0.25);
    selected.Hide();
    Selected = RemoveFromArray(Selected, selected);
    Nodes = RemoveFromArray(Nodes, selected); 
    delete(selected);
}

rule: "Select"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Node selected = GetClosestNode();
    if (!IsNodeSelectable(selected)) return;

    if (!selected.Selected)
    {        
        selected.Select();
        Selected = Append(Selected, selected);
    }
    else
    {
        selected.Deselect();
        Selected = RemoveFromArray(Selected, selected);
    }
}

rule: "Deselect all"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    foreach (Node selected in Selected)
        selected.Deselect();
    Selected = EmptyArray();
}

globalvar define Nodes = EmptyArray();
globalvar define Selected = EmptyArray();

class Node
{
    public define Pos;
    public define ShownLocation;
    private define EffectID;
    public define Selected = false;
    public define visible = false;
    public define SelectIDText;

    public Node(define pos)
    {
        Pos = pos;
        ShownLocation = Pos + Vector(0, 1.25, 0);
    }

    public void Show()
    {
        if (!visible)
        {
            Update();
            visible = true;
        }
    }

    public void Hide()
    {
        if (visible)
        {
            DestroyInWorldText(SelectIDText);
            DestroyEffect(EffectID);
            visible = false;
        }
    }
    
    public void Select()
    {
        Selected = true;
        Update();
    }

    public void Deselect()
    {
        DestroyInWorldText(SelectIDText);
        Selected = false;
        Update();
    }

    private void Update()
    {
        DestroyEffect(EffectID);
        if (!Selected)
            Make(Color.Blue);
        else
        {
            Make(Color.Green);
            root.ActivateScoper(root.scoper, 1, this);
        }
        EffectID = LastCreatedEntity();
    }

    private void Make(Color color)
    {
        CreateEffect(AllPlayers(), Effect.Sphere, color, ShownLocation, 0.25, EffectRev.VisibleTo);
    }

    public void UpdateVisible()
    {
        if (DistanceBetween(HostPlayer(), ShownLocation) < 35 && (IsInViewAngle(HostPlayer(), ShownLocation, 50) || DistanceBetween(HostPlayer(), ShownLocation) < 5))
            Show();
        else
            Hide();
    }
}

rule: "Connect All Segments"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    for (define f = 0; f < CountOf(Selected); f++)
        for (define l = 0; l < CountOf(Selected); l++)
            if ((l != f) && !SegmentExists(Selected[f], Selected[l]))
            {
                Segments = Append(Segments, new Segment(<Node>Selected[f], <Node>Selected[l], FirstAttribute, SecondAttribute));
                (<Segment>LastOf(Segments)).Show();
            }
}

rule: "Connect Segment Path"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.VoiceLineRight))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    for (define i = 1; i < CountOf(Selected); i++)
        if (!SegmentExists(Selected[i - 1], Selected[i]))
        {
            Segments = Append(Segments, new Segment(<Node>Selected[i - 1], <Node>Selected[i], FirstAttribute, SecondAttribute));
            (<Segment>LastOf(Segments)).Show();
        }
}

rule: "Connect Segments From First"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.VoiceLineLeft))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    for (define i = 1; i < CountOf(Selected); i++)
        if (!SegmentExists(Selected[0], Selected[i]))
        {
            Segments = Append(Segments, new Segment(<Node>Selected[0], <Node>Selected[i], FirstAttribute, SecondAttribute));
            (<Segment>LastOf(Segments)).Show();
        }
}

define SegmentExists(define node1, define node2):
    IsTrueForAny(
        Segments,
        ArrayContains((<Segment>ArrayElement()).Nodes, node1)
        &&
        ArrayContains((<Segment>ArrayElement()).Nodes, node2)
    );

rule: "Delete Segments"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    for (define i = CountOf(Segments) - 1; i >= 0; i--)
        if (IsTrueForAll((<Segment>Segments[i]).Nodes, ArrayContains(Selected, ArrayElement())))
        {
            (<Segment>Segments[i]).Hide();
            delete(<Segment>Segments[i]);
            Segments = RemoveFromArrayAtIndex(Segments, i);
        }
}

globalvar define Segments = EmptyArray();

class Segment
{
    public Node Node1;
    public Node Node2;    
    public define Nodes;
    public define FirstAttribute;
    public define SecondAttribute;

    define EffectID;
    public define visible = false;

    public define AttributeText1;
    public define AttributeText2;

    public Segment(Node node1, Node node2, define firstAttribute, define secondAttribute)
    {
        Node1 = node1;
        Node2 = node2;
        Nodes = [Node1, Node2];
        FirstAttribute = firstAttribute;
        SecondAttribute = secondAttribute;
    }

    public void Show()
    {
        if (!visible)
        {
            CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam, Node1.ShownLocation, Node2.ShownLocation, Color.Red, EffectRev.VisibleTo);
            EffectID = LastCreatedEntity();
            visible = true;

            if (FirstAttribute != 0 || SecondAttribute != 0)
            {
                CreateInWorldText(
                    AllPlayers(),
                    FirstAttribute,
                    LinearInterpolate(
                        Node1.ShownLocation,
                        Node2.ShownLocation,
                        0.2
                    ),
                    2.5,
                    Clipping.ClipAgainstSurfaces,
                    InworldTextRev.VisibleTo,
                    Color.Yellow,
                    Spectators.VisibleAlways
                );
                AttributeText1 = LastTextID();
                CreateInWorldText(
                    AllPlayers(),
                    SecondAttribute,
                    LinearInterpolate(
                        Node1.ShownLocation,
                        Node2.ShownLocation,
                        0.8
                    ),
                    2.5,
                    Clipping.ClipAgainstSurfaces,
                    InworldTextRev.VisibleTo,
                    Color.Orange,
                    Spectators.VisibleAlways
                );
                AttributeText2 = LastTextID();
            }
        }
    }
    public void Hide()
    {
        if (visible)
        {
            DestroyEffect(EffectID);
            DestroyInWorldText(AttributeText1);
            DestroyInWorldText(AttributeText2);
            visible = false;
        }
    }
}

globalvar define updateVisibleLook;
globalvar define updateVisiblePosition;

rule: "Update visible"
if (updateVisibleLook == null || DistanceBetween(updateVisiblePosition, HostPlayer()) > 3 || AngleBetweenVectors(updateVisibleLook, FacingDirectionOf(HostPlayer())) > 10)
{
    updateVisibleLook = FacingDirectionOf(HostPlayer());
    updateVisiblePosition = PositionOf(HostPlayer());

    foreach (Segment segment in Segments)
    {
        segment.Node1.UpdateVisible();
        segment.Node2.UpdateVisible();

        if ((segment.Node1.visible) || segment.Node2.visible)
            segment.Show();
        else
            segment.Hide();
        
        MinWait();
    }
    Wait(0.2);
    LoopIfConditionIsTrue();
}

globalvar define compiling = false;

rule: "CSV out"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.VoiceLineUp))
{
    compiling = true;
    SmallMessage(AllPlayers(), "Compiling...");

    nodesOut = EmptyArray();
    segmentsOut = EmptyArray();

    for (define i = 0; i < CountOf(Nodes); i++)
        nodesOut = Append(nodesOut, (<Node>Nodes[i]).Pos);
    
    for (define i = 0; i < CountOf(Segments); i++)
        segmentsOut = Append(segmentsOut, Vector(
            // X is first node
            IndexOfArrayValue(Nodes, (<Segment>Segments[i]).Node1) + ((<Segment>Segments[i]).FirstAttribute / 100),
            // Y is second node
            IndexOfArrayValue(Nodes, (<Segment>Segments[i]).Node2) + ((<Segment>Segments[i]).SecondAttribute / 100),
            // Z is unused
            0
            // (<Segment>Segments[i]).Attribute
        ));

    SmallMessage(AllPlayers(), "Compile Finished!");
    EnableInspectorRecording();
    # Pathmap is compiled. Copy the current global variable set to the clipboard. In vscode, press ctrl+shift+p to open the command pallete, then run the 'Create pathmap from CSV clipboard' command.
    DisableInspectorRecording();
    compiling = false;
}

globalvar define nodesOut    3;
globalvar define segmentsOut 4;

rule: "Preload"
if (CountOf(preloadNodes) != 0)
{
    for (define i = 0; i < CountOf(preloadNodes); i++)
        Nodes = Append(Nodes, new Node(preloadNodes[i]));    
    for (define i = 0; i < CountOf(preloadSegments); i++)
        Segments = Append(Segments, new Segment(
                <Node>Nodes[RoundToInteger(XOf(preloadSegments[i]), Rounding.Down)],
                <Node>Nodes[RoundToInteger(YOf(preloadSegments[i]), Rounding.Down)],
                (XOf(preloadSegments[i]) % 1) * 100,
                (YOf(preloadSegments[i]) % 1) * 100
            ));
}

globalvar define preloadNodes 5;
globalvar define preloadSegments 6;

globalvar define FirstAttribute = 0;
globalvar define SecondAttribute = 0;
globalvar define Attribute = 0;
globalvar define AttributeHud = 0;

rule: "Change Primary Attribute"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ability1))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    FirstAttribute++;
}
rule: "Change Secondary Attribute"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ability2))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    SecondAttribute++;
}
rule: "Reset Primary Attribute"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ability1))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    FirstAttribute = 0;
}
rule: "Reset Secondary Attribute"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ability2))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    SecondAttribute = 0;
}

rule: "Create Attribute HUD"
{
    CreateHudText(
        VisibleTo: AllPlayers(),
        Header   : "Primary Attribute:",
        Subheader: ["Normal", "Custom"][Min(FirstAttribute, 1)],
        Text     : FirstAttribute,
        TextColor: Color.Yellow,
        Location : Location.Top,
        SortOrder: 1
    );
    CreateHudText(
        VisibleTo: AllPlayers(),
        Header   : "Secondary Attribute:",
        Subheader: ["Normal", "Custom"][Min(SecondAttribute, 1)],
        Text     : SecondAttribute,
        TextColor: Color.Orange,
        Location : Location.Top,
        SortOrder: 2
    );
}

rule: "Create Selected ID Text"
Event.OnDamageTaken
if (scoper == EventPlayer())
if (ScopeID == 1)
{
    CreateInWorldText(
        AllPlayers(),
        IndexOfArrayValue(Nodes, ScopeData),
        (<Node>ScopeData).ShownLocation,
        3,
        Clipping.DoNotClip,
        InworldTextRev.String,
        Color.Green,
        Spectators.VisibleAlways
    );
    (<Node>ScopeData).SelectIDText = LastTextID();
}