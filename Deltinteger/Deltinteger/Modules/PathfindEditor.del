import "!Debug Tools.del";
import "!Container.del";

rule: "Commands" -1
{
    DisableInspectorRecording();
    CreateHudText(VisibleTo:AllPlayers(), Text:"https://github.com/ItsDeltin/Overwatch-Script-To-Workshop/wiki/Pathfinding", TextColor:Color.Blue, Location:Location.Right, SortOrder:0);
    HelpText("Ultimate: Create node."                                                    , 1, Color.SkyBlue);
    HelpText("Crouch + Ultimate: Destroy node."                                          , 2, Color.SkyBlue);
    HelpText("Interact: Select node."                                                    , 3, Color.LimeGreen);
    HelpText("Crouch + Interact: Deselect all nodes."                                    , 4, Color.LimeGreen);
    HelpText("Secondary Fire: Connect all selected nodes."                               , 5, Color.Green);
    HelpText("Crouch + Secondary Fire: Disconnect all selected nodes."                   , 6, Color.Green);
    HelpText("Voice Line Right: Create a path from the first to the last selected nodes.", 7, Color.Green);
    HelpText("Voice Line Left: Connect all selected nodes to the first selected node."   , 8, Color.Green);
    HelpText("Shift: Switch attribute."                                                  , 9, Color.Orange);
    HelpText("Voice Line Up: Compile pathmap."                                           , 11, Color.Yellow);

    CreateHudText(
        AllPlayers(),
        Header: <"Current Mode: <0>", ["Free Walk", "Place Nodes And Connect Segments", "Attributes"][CurrentMode]>,
        Location: Location.Top,
        SortOrder: 1,
        Reevaluation: HudTextRev.VisibleToAndString
    );
    CreateHudText(
        CurrentMode == Mode.Attribute ? AllPlayers() : null,
        Header   : "Attribute:",
        Subheader: ["Normal", "Custom"][Min(FirstAttribute, 1)],
        Text     : FirstAttribute,
        TextColor: Color.Yellow,
        Location : Location.Top,
        SortOrder: 2
    );
    CreateHudText(
        CurrentMode == Mode.Place ? AllPlayers() : null,
        Header   : "Place mode:",
        Subheader: ["Connect All", "Connect as path leading from first", "Connect first selected to all"][PlaceMode],
        Text     : FirstAttribute,
        TextColor: Color.Yellow,
        Location : Location.Top,
        SortOrder: 2
    );
}

globalvar Mode CurrentMode;
enum Mode
{
    Navigate,
    Place,
    Attribute
}

globalvar define scoper; // The dummy used for reevaluation containers.
globalvar define compiling = false; // Determines if the pathmap is currently compiling.
globalvar Vector nodesOut 0; // The nodes for the CSV output.
globalvar Vector segmentsOut 1; // The segments for the CSV output.
globalvar Vector attributesOut 2; // The attributes for the CSV output.
globalvar Vector preloadNodes 3; // Preloading nodes.
globalvar Vector preloadSegments 4; // Preloading segments.
globalvar Vector preloadAttributes 5; // Preloading segments.

globalvar define PlaceMode = 0;
globalvar define FirstAttribute = 0; // The selected attribute.

// Used for updating visible effects.
globalvar define updateVisibleLook;
globalvar define updateVisiblePosition;

rule: "Create Scoper"
{
    if (CurrentGameMode() == GameMode.Deathmatch)
        CreateDummyBot(Hero.Roadhog, Team.All, 1, Vector(0, 1000, 0));
    else
        CreateDummyBot(Hero.Roadhog, Team.Team1, 1, Vector(0, 1000, 0));
    scoper = LastCreatedEntity();
    SetGravity(scoper, 0);
    SetStatus(scoper, null, Status.Unkillable, 9999);
    SetMaxHealth(scoper, 1000);
    StartDamageModification(scoper, FilteredArray(AllPlayers(), ArrayElement() != scoper), 0, DamageModificationRev.ReceiversDamagersAndDamagePercent);
    SetInvisible(scoper, InvisibleTo.All);
}

void HelpText(ref define text, ref define order, Color color)
{
    CreateHudText(VisibleTo:AllPlayers(), Subheader:text, SubheaderColor:color, Location:Location.Right, SortOrder:order);
}

rule: "Disable conflicting controls"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
{
    SetSecondaryFireEnabled(EventPlayer(), false);
}
rule: "Enable conflicting controls"
Event.OngoingPlayer
if (CurrentMode != Mode.Place)
{
    SetSecondaryFireEnabled(EventPlayer(), true);
}
rule: "Set mode"
if (IsButtonHeld(HostPlayer(), Button.Interact))
{
    CurrentMode++;
    if (CurrentMode > 2) CurrentMode = 0;
}

Node GetClosestNode(): Nodes.SortedArray(Node node => EyePosition().DistanceTo(node.ShownLocation))[0];
define IsNodeSelectable(Node node): DistanceBetween(node.Pos, EyePosition(EventPlayer())) < 5;

rule: "Create node"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Nodes = Append(Nodes, new Node(PositionOf(EventPlayer())));
    (<Node>LastOf(Nodes)).Show();
}

rule: "Delete node"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Node selected = GetClosestNode();
    if (!IsNodeSelectable(selected)) return;

    for (define i = CountOf(Segments) - 1; i >= 0; i--)
        if (ArrayContains((<Segment>Segments[i]).Nodes, selected))
        {
            (<Segment>Segments[i]).Hide();
            delete(<Segment>Segments[i]);
            Segments = RemoveFromArrayAtIndex(Segments, i);
        }
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Blue, selected.ShownLocation, 0.25);
    selected.Hide();
    Selected = RemoveFromArray(Selected, selected);
    Nodes = RemoveFromArray(Nodes, selected); 
    delete(selected);
}

rule: "Select"
Event.OngoingPlayer
if (CurrentMode == Mode.Place || CurrentMode == Mode.Attribute)
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Node selected = GetClosestNode();
    if (!IsNodeSelectable(selected)) return;

    if (!selected.Selected)
    {
        selected.Select();
        Selected = Append(Selected, selected);
    }
    else
    {
        selected.Deselect();
        Selected = RemoveFromArray(Selected, selected);
    }
}

rule: "Deselect all"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    foreach (Node selected in Selected)
        selected.Deselect();
    Selected = EmptyArray();
}

globalvar Node[] Nodes = [];
globalvar Node[] Selected = [];
globalvar LinkedAttribute[] Attributes = [];

class Node
{
    public define Pos;
    public define ShownLocation;
    private define EffectID;
    public define Selected = false;
    public define visible = false;
    public define SelectIDText;
    public define ID: root.Nodes.IndexOf(this);

    public VisibleAttributeInfo[] VisibleAttribute = [];

    public Node(define pos)
    {
        Pos = pos;
        ShownLocation = Pos + Vector(0, 1.25, 0);
    }

    public void Show()
    {
        if (!visible)
        {
            Update();
            visible = true;
        }
    }

    public void Hide()
    {
        if (visible)
        {
            DestroyInWorldText(SelectIDText);
            DestroyEffect(EffectID);
            visible = false;
            DestroyAttributes();
        }
    }
    
    public void Select()
    {
        Selected = true;
        Update();
    }

    public void Deselect()
    {
        DestroyInWorldText(SelectIDText);
        Selected = false;
        Update();
    }

    private void Update() "Update"
    {
        DestroyEffect(EffectID);
        if (!Selected)
            Make(Color.Blue);
        else
        {
            Make(Color.Green);
            root.ActivateScoper(root.scoper, 1, this);
        }
        EffectID = LastCreatedEntity();
        UpdateAttributeTexts();
    }

    private void DestroyAttributes() "Destroy Attributes"
    {
        foreach (VisibleAttributeInfo visibleAttribute in VisibleAttribute)
        {
            DestroyInWorldText(visibleAttribute.InworldText);
            delete(visibleAttribute);
        }
        VisibleAttribute = [];
    }

    public void UpdateAttributeTexts() "Update Attribute Texts"
    {
        DestroyAttributes();

        LinkedAttribute[] show = root.Attributes.FilteredArray(LinkedAttribute attribute => attribute.Node1 == this);
        foreach (LinkedAttribute attribute in show)
        {
            define index = VisibleAttribute.IndexOf(VisibleAttribute.FilteredArray(VisibleAttributeInfo info => info.Link == attribute.Node2)[0]);
            if (index == -1)
            {
                index = VisibleAttribute.Length;
                ModifyVariable(VisibleAttribute, Operation.AppendToArray, new VisibleAttributeInfo(this, attribute.Node2));
                VisibleAttribute[index].String = attribute.ID;
            }
            else
                VisibleAttribute[index].String = <"<0>\n<1>", VisibleAttribute[index].String, attribute.ID>;
        }

        foreach (VisibleAttributeInfo visibleAttribute in VisibleAttribute)
        {
            root.ActivateScoper(root.scoper, 2, visibleAttribute);
            MinWait();
        }
    }

    private void Make(Color color)
    {
        CreateEffect(AllPlayers(), Effect.Sphere, color, ShownLocation, 0.25, EffectRev.VisibleTo);
    }

    public void UpdateVisible()
    {
        if (DistanceBetween(HostPlayer(), ShownLocation) < 35 && (IsInViewAngle(HostPlayer(), ShownLocation, 50) || DistanceBetween(HostPlayer(), ShownLocation) < 5))
            Show();
        else
            Hide();
    }
}

class VisibleAttributeInfo
{
    public Node Source;
    public Node Link;
    public define String = "";
    public define InworldText;

    public VisibleAttributeInfo(ref Node source, ref Node link)
    {
        Source = source;
        Link = link;
    }

    public void Make()
    {
        DestroyHudText(InworldText);
        CreateInWorldText(
            AllPlayers(),
            String,
            LinearInterpolate(
                Source.ShownLocation,
                Link.ShownLocation,
                0.2
            ),
            1.5,
            Clipping.ClipAgainstSurfaces,
            InworldTextRev.VisibleTo,
            Color.Yellow,
            Spectators.VisibleAlways
        );
        InworldText = LastTextID();
    }
}

rule: "Connect All Segments"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
if (IsButtonHeld(EventPlayer(), Button.Melee))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
if (PlaceMode == 0)
{
    for (define f = 0; f < CountOf(Selected); f++)
        for (define l = 0; l < CountOf(Selected); l++)
            if ((l != f) && !SegmentExists(Selected[f], Selected[l]))
            {
                Segments = Append(Segments, new Segment(<Node>Selected[f], <Node>Selected[l]));
                (<Segment>LastOf(Segments)).Show();
            }
}

rule: "Connect Segment Path"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
if (IsButtonHeld(EventPlayer(), Button.Melee))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
if (PlaceMode == 1)
{
    for (define i = 1; i < CountOf(Selected); i++)
        if (!SegmentExists(Selected[i - 1], Selected[i]))
        {
            Segments = Append(Segments, new Segment(<Node>Selected[i - 1], <Node>Selected[i]));
            Segments.Last.Show();
        }
}

rule: "Connect Segments From First"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
if (IsButtonHeld(EventPlayer(), Button.Melee))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
if (PlaceMode == 2)
{
    for (define i = 1; i < CountOf(Selected); i++)
        if (!SegmentExists(Selected[0], Selected[i]))
        {
            Segments = Append(Segments, new Segment(<Node>Selected[0], <Node>Selected[i]));
            Segments.Last.Show();
        }
}

define SegmentExists(define node1, define node2):
    IsTrueForAny(
        Segments,
        ArrayContains((<Segment>ArrayElement()).Nodes, node1)
        &&
        ArrayContains((<Segment>ArrayElement()).Nodes, node2)
    );

rule: "Delete Segments"
Event.OngoingPlayer
if (CurrentMode == Mode.Place)
if (IsButtonHeld(EventPlayer(), Button.Melee))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    for (define i = CountOf(Segments) - 1; i >= 0; i--)
        if (IsTrueForAll((<Segment>Segments[i]).Nodes, ArrayContains(Selected, ArrayElement())))
        {
            (<Segment>Segments[i]).Hide();
            delete(<Segment>Segments[i]);
            Segments = RemoveFromArrayAtIndex(Segments, i);
        }
}

globalvar Segment[] Segments = EmptyArray();

class Segment
{
    public Node Node1;
    public Node Node2;    
    public define Nodes;

    define EffectID;
    public define visible = false;

    public Segment(Node node1, Node node2)
    {
        Node1 = node1;
        Node2 = node2;
        Nodes = [Node1, Node2];
    }

    public void Show()
    {
        if (!visible)
        {
            CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam, Node1.ShownLocation, Node2.ShownLocation, Color.Red, EffectRev.VisibleTo);
            EffectID = LastCreatedEntity();
            visible = true;
        }
    }
    public void Hide()
    {
        if (visible)
        {
            DestroyEffect(EffectID);
            visible = false;
        }
    }
}

rule: "Update visible"
if (updateVisibleLook == null || DistanceBetween(updateVisiblePosition, HostPlayer()) > 3 || AngleBetweenVectors(updateVisibleLook, FacingDirectionOf(HostPlayer())) > 10)
{
    updateVisibleLook = FacingDirectionOf(HostPlayer());
    updateVisiblePosition = PositionOf(HostPlayer());

    foreach (Segment segment in Segments)
    {
        segment.Node1.UpdateVisible();
        segment.Node2.UpdateVisible();

        if ((segment.Node1.visible) || segment.Node2.visible)
            segment.Show();
        else
            segment.Hide();
        
        MinWait();
    }
    Wait(0.2);
    LoopIfConditionIsTrue();
}

rule: "CSV out"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.VoiceLineUp))
{
    compiling = true;
    SmallMessage(AllPlayers(), "Compiling...");

    nodesOut = [];
    segmentsOut = [];
    attributesOut = [];

    foreach (Node node in Nodes)
        ModifyVariable(nodesOut, Operation.AppendToArray, node.Pos);
    
    foreach (Segment segment in Segments)
        ModifyVariable(segmentsOut, Operation.AppendToArray, Vector(
            // X is first node
            segment.Node1.ID,
            // Y is second node
            segment.Node2.ID,
            // Z is unused
            0
            // (<Segment>Segments[i]).Attribute
        ));
    
    foreach (LinkedAttribute attribute in Attributes)
        ModifyVariable(attributesOut, Operation.AppendToArray, Vector(
            attribute.Node1,
            attribute.Node2,
            attribute.ID,
        ));

    SmallMessage(AllPlayers(), "Compile Finished!");
    EnableInspectorRecording();
    # Pathmap is compiled. Copy the current global variable set to the clipboard. In vscode, press ctrl+shift+p to open the command pallete, then run the 'Create pathmap from CSV clipboard' command.
    DisableInspectorRecording();
    compiling = false;
}

rule: "Preload"
if (CountOf(preloadNodes) != 0)
{
    // Load nodes
    foreach (Vector preload in preloadNodes)
        ModifyVariable(Nodes, Operation.AppendToArray, new Node(preload));
    
    // Load segments
    foreach (Vector preload in preloadSegments)
        ModifyVariable(Segments, Operation.AppendToArray, new Segment(
                Nodes[preload.X],
                Nodes[preload.Y]
            ));
    
    // Load attributes
    foreach (Vector preload in preloadAttributes)
        ModifyVariable(Attributes, Operation.AppendToArray, new LinkedAttribute(
            preload.X,
            preload.Y,
            preload.Z
        ));
}

rule: "Change Primary Attribute"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Reload))
{
    if (CurrentMode == Mode.Attribute)
        FirstAttribute++;
    else
        PlaceMode = Min(2, PlaceMode + 1);
}
rule: "Reset Primary Attribute"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ability2))
{
    if (CurrentMode == Mode.Attribute)
        FirstAttribute--;
    else
        PlaceMode = Max(0, PlaceMode - 1);
}

rule: "Create Selected ID Text"
Event.OnDamageTaken
if (scoper == EventPlayer())
if (ScopeID == 1)
{
    DestroyInWorldText((<Node>ScopeData).SelectIDText);
    CreateInWorldText(
        AllPlayers(),
        IndexOfArrayValue(Nodes, ScopeData),
        (<Node>ScopeData).ShownLocation,
        3,
        Clipping.DoNotClip,
        InworldTextRev.String,
        Color.Green,
        Spectators.VisibleAlways
    );
    (<Node>ScopeData).SelectIDText = LastTextID();
}

rule: "Create Selected ID Text"
Event.OnDamageTaken
if (scoper == EventPlayer())
if (ScopeID == 2)
{
    (<VisibleAttributeInfo>ScopeData).Make();
}

class LinkedAttribute
{
    public Node Node1;
    public Node Node2;
    public define ID;

    public LinkedAttribute(ref Node node1, ref Node node2, ref define id)
    {
        Node1 = node1;
        Node2 = node2;
        ID = id;
    }
}

rule: "Add attribute"
Event.OngoingPlayer
if (CurrentMode == Mode.Attribute)
if (IsButtonHeld(EventPlayer(), Button.Melee))
if (Selected.Length >= 2)
{
    Node node1 = Selected[Selected.Length - 2];
    Node node2 = Selected.Last;

    LinkedAttribute matching = Attributes.FilteredArray(LinkedAttribute attribute => attribute.Node1 == node1 && attribute.Node2 == node2 && attribute.ID == FirstAttribute)[0];
    if (matching != null)
    {
        ModifyVariable(Attributes, Operation.RemoveFromArrayByValue, matching);
        delete(matching);
    }
    else
        ModifyVariable(Attributes, Operation.AppendToArray, new LinkedAttribute(node1, node2, FirstAttribute));
    
    node1.UpdateAttributeTexts();
}