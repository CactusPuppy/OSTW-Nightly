define globalvar myArray C;

/*
rule: "setup array"
Event.OngoingPlayer
{
    myArray[0] = [1, 2, 3, 4];
    myArray[1] = [Hero.Ana, Hero.Ashe, Hero.Baptiste];
    myArray[2] = [Team.Team1, 75, Team.Team2];
}
*/

rule: "Array Test"
{
    define testArray Z = [5, 6, 7, 8, 9];
    testArray = RemoveFromArrayAtIndex(testArray, 2);  
}

rule: "My Rule"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
    dims = EmptyArray();
    arrayWalk(myArray, 0, 0);
}

define playervar dims;
recursive method arrayWalk(array, index)
{ 
    for (; index < CountOf(array); index++)
    {
        if (CountOf(array[index]) == 0)
        {
            MinWait();
            define arrayLength = CountOf(dims);

            if (arrayLength == 0)
                SmallMessage(AllPlayers(), <"<0>: <1>", index, array[index]>);
            else if (arrayLength == 1)
                SmallMessage(AllPlayers(), <"<0>, <1>: <2>", dims[0], index, array[index]>);
            else if (arrayLength == 2)
                SmallMessage(AllPlayers(), <"<0>, <1>, <2>: <3>", dims[0], dims[1], index, array[index]>);
            else if (arrayLength == 3)
                SmallMessage(AllPlayers(), <"<0>, <1>, <2>, <3>: <4>", dims[0], dims[1], dims[2], index, array[index]>);
            else if (arrayLength == 4)
                SmallMessage(AllPlayers(), <"<0>, <1>, <2>, <3>, <4>: <5>", dims[0], dims[1], dims[2], dims[3], index, array[index]>);
            else if (arrayLength == 5)
                SmallMessage(AllPlayers(), <"<0>, <1>, <2>, <3>, <4>, <5>: <6>", dims[0], dims[1], dims[2], dims[3], dims[4], index, array[index]>);

            MinWait();
        } 
        else
        {
            dims = Append(dims, index);
            arrayWalk(array[index], 0);
            dims = ArraySlice(dims, 0, CountOf(dims) - 1);
        }
    }
}