{
	"scopeName": "source.del",
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Overwatch Script To Workshop",
	"patterns": [
		{ "include": "#ruleset" },
		{ "include": "#comments" }
	],
	"repository": {
		"ruleset": {
			"patterns": [
				{"include": "#rule"},
				{"include": "#strings"},
				{"include": "#if"},
				{"include": "#rule_option"},
				{"include": "#block"},
				{"include": "#new"},
				{"include": "#define_type"},
				{"include": "#define_method"},
				{"include": "#define_variable"},
				{"include": "#keywords"}
			]
		},
		"rule": {
			"match": "\\b(rule)\\s*:",
			"captures": {
				"1": {"name":"keyword.other"}
			}
		},
		"if": {
			"begin": "((else\\s+)?if)\\s*\\(",
			"beginCaptures": {
				"1": {"name": "keyword.other"}
			},
			"end": "\\)",
			"patterns": [{"include": "#expressions"}]
		},
		"rule_option": {
			"match": "([a-zA-Z0-9]+)\\s*\\.\\s*([a-zA-Z0-9]+)",
			"captures": {
				"1": {"name": "entity.name.type"},
				"2": {"name": "variable.other"}
			}
		},
		"define_variable": {
			"begin": "((public|private|static|globalvar|playervar)\\s+)*((define)|([_[:alnum:]]+))(\\s+[_[:alnum:]]+)(\\s*(\\!|([0-9]+)))?(\\s*=)?",
			"beginCaptures": {
				"2": {"name":"keyword.other"},
				"4": {"name":"keyword.other"},
				"5": {"name":"entity.name.class"},
				"6": {"name":"variable.name"},
				"9": {"name":"constant.numeric"}
			},
			"end": ";",
			"patterns": [{"include": "#expressions"}]
		},
		"define_method": {
			"begin": "((public|private|static|recursive)\\s+)*(((method)|([_[:alnum:]]+))\\s+)([_[:alnum:]]+\\s*\\()",
			"beginCaptures": {
				"2": {"name":"keyword.other"},
				"5": {"name":"keyword.other"},
				"6": {"name":"entity.name.class"},
				"7": {"name":"entity.name.function"}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {"name":"entity.name.function"}
			},
			"patterns": [{"include": "#parameter"}]
		},
		"parameter": {
			"match": "((define)|([_[:alnum:]]+)) +([_[:alnum:]]+)",
			"captures": {
				"2": { "name": "keyword.other" },
				"3": { "name": "entity.name.type" },
				"4": { "name": "variable.parameter" }
			}
		},
		"define_type": {
			"match": "(class|struct|enum)\\s+([_[:alnum:]]+)",
			"captures": {
				"1": {"name": "keyword.other"},
				"2": {"name": "entity.name.class"}
			}
		},

		"block": {
			"begin": "{",
			"end": "}",
			"patterns": [{"include": "#statement"}, {"include": "#comments"}, {"include": "#expressions"}, {"include": "#define_method"}]
		},
		"statement": {
			"patterns": [
				{"include": "#methods"},
				{"include": "#if"},
				{"include": "#define_variable"}
			]
		},
		"expressions": {
			"patterns": [
				{"include": "#new"},
				{"include": "#methods"},
				{"include": "#keywords"}, 
				{"include": "#strings"},
				{"include": "#comments"}, 
				{"include": "#numbers"},
				{"include": "#variables"}
			]
		},
		"methods": {
			"name": "entity.name.function",
			"begin": "[_[:alnum:]]+\\(",
			"end": "\\)",
			"patterns": [{"include": "#expressions"}]
		},
		"new": {
			"begin": "(new)\\s+([_[:alnum:]]+)\\s*\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": {"name":"keyword.other"},
				"2": {"name":"entity.name.class"}
			},
			"patterns": [{"include": "#expressions"}]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				},
				{
					"name": "string.regexp",
					"match": "<[0-9]+>"
				}
			]
		},
		"comments": {
			"patterns": [
				{"begin": "//"    , "end": "$"      , "name": "comment.line.double-slash"},
				{"begin": "\\/\\*", "end": "\\*\\/" , "name": "comment.block"},
				{"begin": "#", "end": "$", "name": "comment.block.documentation" }
			]
		},
		"numbers": {
			"name": "constant.numeric",
			"match": "\\b-?[0-9]+(.[0-9]+)?\\b"
		},

		"keywords": {
			"name": "keyword.other",
			"match": "\\b(if|else|while|for|foreach|return|in|define|rule|true|false|usevar|method|recursive|playervar|globalvar|buildervar|null|struct|class|public|private|static|new|this|import|as|delete|root|macro)\\b"
		},
		"variables": {
			"name": "variable",
			"match": "[a-zA-Z_0-9]+"
		}
	}
}